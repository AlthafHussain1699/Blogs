<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('./partials/head') %>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BlogVerse</title>
    <style>
        h4 {
            font-size: 1.25rem; 
            margin: 0; 
            line-height: 1.2;
        }
        .card-text {
            line-height: 1.6;
            padding: 10px;
            font-size: 1rem;
          }
          .card-img-top{
            max-width: 100%; 
            max-height: 400px;
            width: auto; 
            height: auto;
          }
    </style>
</head>
<body>  
    
    <%- include('./partials/navBar') %>
    <div class="container mt-3">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div style="overflow: auto;">
                    <p class="card-title" style="font-size: 1rem; font-weight: 500;">
                        <%= blog.title %>
                    </p>
                </div>                
                <% if (locals.user._id == locals.blog.createdBy._id){ %>
                    <div class="d-flex">
                        <a href="/blog/updateBlogForm/<%= blog._id %>" class="btn btn-primary btn-sm mr-2">Edit</a>
                        <a href="/blog/deleteBlog/<%= blog._id %>" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to delete this Blog?');">Delete</a>
                    </div>                    
                <% } %>
            </div>
            <div class="card-body">
                <div class="text-center">
                    <img src="<%= blog.coverImageUrl %>" class="card-img-top img-fluid  border border-dark rounded" alt="Cover Image for <%= blog.title %>">
                </div>
                <div id="blog-content" class="card-text ms-3 mt-3">
                    <%= blog.body.substring(0, 1000) %>... 
                    <a href="#" id="read-more" data-id="<%= blog.id %>">Read more</a>
                </div>
                  <p class="mt-3 mb-0">
                    <strong>Author:</strong> <%= blog.createdBy.name %> 
                    <br>
                    <small>Created on: <%= blog.createdAt.toDateString() %></small>
                </p>                
            </div>
        </div>
    </div>
    <div class="container mt-3">
        <div class="card p-3"> 
            <div class="mb-1">
                <p><strong class="font-weight-bolder">Comments</strong>(<%= comments.length %>)</p>
            </div>
            <form action="/comment/addComment/<%= blog._id %>" method="post">
                <div class="form-group mb-3"> 
                    <input class="form-control" id="commentBody" name="commentBody" placeholder="Add a Comment" required></input>
                </div>
                <button type="submit" class="btn btn-primary mt-1">Add</button> <!-- Added margin-top -->
            </form>
        </div>
    </div>
    
    <% if (locals.comments && locals.comments.length > 0) { %>
        <% comments.forEach(comment => { %>
            <div class="container mt-3 pb-3 " id = "comment-<%= comment._id %>">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <img src="<%= comment.createdBy.profileImageUrl %>" width="30px" alt="Profile" class="mr-2">
                            <p><%= comment.createdBy.name %></p>
                        </div>
                        <% if (locals.user && locals.user._id == comment.createdBy._id) { %>
                            <div class="d-flex">
                                <button class="btn btn-primary btn-sm mr-2" onclick="enableEdit('<%= comment._id %>')">Edit</button>
                                <button class="btn btn-success btn-sm mr-2" id="saveBtn-<%= comment._id %>" style="display:none;" onclick="saveComment('<%= comment._id %>')">Save</button>
                                <button class="btn btn-danger btn-sm mr-2" id="deleteBtn-<%= comment._id %>"  onclick="deleteComment('<%= comment._id %>')">Delete</button>
                            </div>
                        <% } %>
                    </div>
                    <div class="card-body">
                        <input type="text" id="commentInput-<%= comment._id %>" class="form-control" value="<%= comment.comment %>" readonly>
                    </div>
                </div>
            </div>
        <% }) %>
    <% } else { %>
        <p>No comments yet.</p>
    <% } %>
    
    <%- include('./partials/script') %>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const blogContentDiv = document.getElementById("blog-content");
        
            function fetchBlogContent(blogId, isReadMore) {
                const url = isReadMore ? `/blog/full-content/${blogId}` : `/blog/less-content/${blogId}`;
                const linkText = isReadMore ? "Read Less" : "Read more";
                const linkId = isReadMore ? "read-less" : "read-more";
        
                fetch(url)
                    .then(response => response.json())
                    .then(data => {
                        // Create the link (Read more / Read less)
                        const link = `<a href="#" id="${linkId}" data-id="${blogId}">${linkText}</a>`;
        
                        // Update the content with full or truncated text and the toggle link
                        blogContentDiv.innerHTML = `${data.content} ${link}`;
        
                        // Add event listener for the new Read More / Read Less link
                        document.getElementById(linkId).addEventListener("click", function (event) {
                            event.preventDefault();
                            fetchBlogContent(blogId, !isReadMore); // Toggle between full/less content
                        });
                    })
                    .catch(error => console.error("Error fetching blog content:", error));
            }
    
            const readMoreLink = document.getElementById("read-more");
            if (readMoreLink) {
                readMoreLink.addEventListener("click", function (event) {
                    event.preventDefault();
                    const blogId = readMoreLink.getAttribute("data-id");
                    fetchBlogContent(blogId, true); 
                });
            }
        });
        function enableEdit(commentId) {
            // Enable editing on the comment input field
            const commentInput = document.getElementById(`commentInput-${commentId}`);
            commentInput.removeAttribute("readonly");
            
            // Show the Save button
            const saveButton = document.getElementById(`saveBtn-${commentId}`);
            saveButton.style.display = "inline-block";
        }

        // Function to save the edited comment
        function saveComment(commentId) {
            const commentInput = document.getElementById(`commentInput-${commentId}`);
            const updatedComment = commentInput.value;

            fetch(`/comment/updateComment/${commentId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    comment: updatedComment
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // After saving, set the input back to readonly and hide Save button
                    commentInput.setAttribute("readonly", true);
                    const saveButton = document.getElementById(`saveBtn-${commentId}`);
                    saveButton.style.display = "none";
                    
                    alert('Comment updated successfully');
                } else {
                    alert('Error updating comment');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating comment');
            });
        }
        function deleteComment(commentId) {
            // Ask for confirmation before deleting the comment
            const isConfirmed = window.confirm("Are you sure you want to delete this comment?");
            
            if (isConfirmed) {
                // Proceed with the deletion if confirmed
                fetch(`/comment/deleteComment/${commentId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const comment = document.getElementById(`comment-${commentId}`);
                        comment.remove();
                    } else {
                        alert("Error deleting comment");
                    }
                })
                .catch(error => {
                    console.log(error);
                });
            } else {
                // If the user cancels, do nothing
                console.log("Comment deletion canceled.");
            }
        }
    </script>
</body>
</html>
